Q1..
    <!DOCTYPE html>
    <html>
    <script>
        const arr = [3,4,1,25,5,23,23,34,20,56,4,2,52,56,53,4,3,2,65,24,78,9];
        for(var i=0; i<arr.length; i++)
            {
                if((arr[i] % 2) === 0)
                {
                    console.log(arr[i]);
                }
            }
    </script>
    </html>

Q2..
    <!DOCTYPE html>
    <html>
    <script>
        const arr = [0,0,1,1,0,0,0,1,0,0,1,1,1,0];
        let count =0;
        let max = 0;
        for(var i=0; i<arr.length; i++)
            {
                if(arr[i] === 0)
                {
                    count = 0;
                }
                else{
                count++;
                if(count > max) max = count;
                }
            }
            console.log(max);
    </script>
    </html>


Q3..
    <!DOCTYPE html>
    <html>
    <script>
        const arr =[1,2,3,4,5,6,7,8,9,1,1,1,3,7,7];
        const sorted_arr = arr.sort();
        const result = [];
        for(let i=0; i<sorted_arr.length; i++)
            {
                for(let j=i+1; j<sorted_arr.length; j++)  
                {  
                    if(sorted_arr[j] === sorted_arr[i])
                    {
                        if(result.indexOf(sorted_arr[i]) === -1)
                        {
                        result.push(sorted_arr[i]);
                        }
                    }
                } 
            }
        console.log(result)
    </script>
    </html>


Q4..
    constructor(props) {
    super(props);
    this.state = {
        dataSource: ""
    }
   
    }
    fetchExample() {

    return fetch('www.example.com/api/get/1', {
        method: 'POST',
        headers: { 'Accept': 'application/json', 'Content-Type': 'application/json' },

    })
        .then((response) => response.json())
        .then((responseJson) => {
            this.setState({
                dataSource: responseJson
            });
        })
        .catch((error) => {
            console.error(error.message);
        })
    }

Q5..
	unable to solve the problem




import React, {Component} from 'react';
import {StyleSheet ,TextInput, View ,Text,TouchableOpacity} from 'react-native';
import { FlatList} from 'react-native-gesture-handler';




class Firstscreen extends React.Component
{
    static navigationOptions = {
        headerShown: false,
    
      }
    constructor(props) {
        super(props);
        this.array =[],
        this.state={
            arrayHolder:[],
            textInput_Holder:'',
        }
        this.myTextInput = React.createRef();
    }

    componentDidMount() {
          this.setState({ arrayHolder: [...this.array] })
          }
     
     
      addData = () => {    
        this.array.push({title : this.state.textInput_Holder});       
        this.setState({ arrayHolder: [...this.array] })
        this.myTextInput.current.clear();
      }
     
      
      
    render(){
              
        return (
                           
                <View style={styles.container}>
                     
                        <View style={styles.container1}>
                            <Text style={styles.headerText}>To Do List</Text>
                        </View>

                        <View style={styles.container2}>

                            <TextInput
                                style={styles.textInput}
                                placeholder='Enter new task'
                                onChangeText={data => this.setState({ textInput_Holder: data })}
                                ref={this.myTextInput}
                            />
                            <TouchableOpacity onPress={this.addData}  style={styles.button} ><Text style={styles.buttonText}> New Task </Text>
                            </TouchableOpacity>

                        </View>

                        <View style={styles.container3}>

                            <FlatList
                            
                                data={this.state.arrayHolder}
                                keyExtractor={(index) => index.toString()}
                                renderItem={({ item }) => <TouchableOpacity style={styles.listStyle}><Text style={styles.listTextStyle}>{item.title}</Text></TouchableOpacity>}
                            />
                        </View>
                </View>
                
        )
    }
}
export default Firstscreen;


const styles = StyleSheet.create({
    container: {
      flex:1,
      backgroundColor: '#fff',
      alignItems: 'center',
      
    },
    container1:{
        height:'12%', 
        backgroundColor: '#466aa3', 
        alignItems: 'center',
        justifyContent:'center',
        width: 384,
    },
    container2:{
        height:'18%',
        width:'100%',       
        backgroundColor:'#e3e5e8',
        alignItems:'center',
        justifyContent:'center'
    
    },
    container3:{
        height:500,
        width:'100%',
        
        backgroundColor:'#e3e5e8'
    },
    headerText:{
        alignContent:'center',
        justifyContent:'center',
        paddingTop:30,
        fontSize:20,
        fontWeight:'bold'       
    },
    textInput:{
        
        height:'30%',
        width: '80%',
        backgroundColor:'#fff',
        borderRadius: 8,
        alignItems:'center',
        paddingHorizontal:20
    },
    button: {
 
        width: '80%',
        height: '30%',
        marginTop:10,
        backgroundColor: '#4CAF50',
        borderRadius: 8,
        alignItems:'center',
        justifyContent:'center'
    },
    buttonText:{
        fontSize:16
    },
    listStyle:{
        height:40,
        marginBottom:5,
        borderRadius:5,
        backgroundColor:'grey',
        marginHorizontal:20,
        backgroundColor: '#fff',
        elevation: 5,
        justifyContent:'center'
    },
    listTextStyle:{
        paddingHorizontal:20,
        fontSize:16
    }
    
    
});